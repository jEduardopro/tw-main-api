<?php

namespace Tests;

use Illuminate\Broadcasting\Channel;
use Illuminate\Broadcasting\PrivateChannel;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
use Illuminate\Foundation\Testing\TestCase as BaseTestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Artisan;

abstract class TestCase extends BaseTestCase
{
    use CreatesApplication, WithFaker;

    protected function setUp(): void
    {
        parent::setUp();

        Artisan::call('passport:install');
    }

    public function userValidData(array $overrides = []): array
    {
        return array_merge([
            'name' => 'name test',
            'email' => 'example_test@example.com',
            'phone' => env("PHONE_NUMBER_TEST"),
            'date_birth' => now()->subYears(13)->format('Y-m-d')
        ], $overrides);
    }

    protected function assertDontBroadcastToCurrentUser($event, $socketId = "socket-id")
    {
        $this->assertInstanceOf(ShouldBroadcast::class, $event);
        $this->assertEquals(
            $socketId, // Generated by Broadcast::shouldReceive('socket')->andReturn('socket-id')
            $event->socket,
            'The event ' . get_class($event) . ' must call the method "dontBroadcastToCurrentUser" in the constructor.'
        );
    }

    protected function assertEventChannelType($channelType, $event)
    {
        $types = [
            "public" => Channel::class,
            "private" => PrivateChannel::class,
        ];

        $this->assertEquals($types[$channelType], get_class($event->broadcastOn()));
    }

    protected function assertEventChannelName($name, $event)
    {
        $this->assertEquals($name, $event->broadcastOn()->name);
    }

    protected function assertClassUsesTrait($trait, $class)
    {
        $this->assertArrayHasKey(
            $trait,
            class_uses($class),
            "{$class} must use {$trait} trait"
        );
    }
}
